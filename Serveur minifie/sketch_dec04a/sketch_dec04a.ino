 #include "Arduino.h"
#include "Audio.h"
#include <WiFi.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <WebSocketsServer.h>
#include <Preferences.h>
#include <ESPmDNS.h>
#include "soc/rtc_wdt.h"
#include <FastLED.h>
#include "SPIFFS.h"
AsyncWebServer server(80);WebSocketsServer webSocket = WebSocketsServer(81);char ssidAP[] = "WIFI_ESP";char passwordAP[] = "mypassword21";unsigned int vitesse_de_communication = 115200;Preferences preferences;String domaine = "buzzer";typedef struct Joueur { String nom_complet; int nombre_bonne_reponses; int nombre_mauvaiz_reponses;  int position_pin; int a_buzzer;} Joueur;typedef struct Match { String nom_match; String equipe_A; String equipe_B; int current_score_A; int current_score_B; String current_phase; String vainqueur;} Match;Joueur j_1_A = {"", 0,0, 36,0}; Joueur j_2_A = {"", 0,0, 39,0};Joueur j_3_A = {"", 0,0, 34,0}, j_4_A = {"", 0,0, 35,0}, j_1_B = {"", 0,0, 4,0}, j_2_B = {"", 0,0, 16,0}, j_3_B = {"", 0,0, 17,0}, j_4_B = {"", 0,0, 5,0};Match match;int pin[] = {j_1_A.position_pin, j_2_A.position_pin, j_3_A.position_pin, j_4_A.position_pin, j_1_B.position_pin, j_2_B.position_pin, j_3_B.position_pin, j_4_B.position_pin};int counter = 0;
#define DATA_PIN_A  33
#define DATA_PIN_B 21
#define NUM_LED_A 12*4
#define NUM_LED_B 12*4
CRGB LED_A[NUM_LED_A];
CRGB LED_B[NUM_LED_B]; 
#define I2S_DOUT      25
#define I2S_BCLK      27
#define I2S_LRC       26
Audio audio;  void initSound(){ audio.setPinout(I2S_BCLK, I2S_LRC, I2S_DOUT); audio.setVolume(100); }void playSound(const char* path){ audio.connecttoFS(SPIFFS, path);}void play(){ for(int i = 0; i < 1000; i++) audio.loop();}bool verified_configuration(){ preferences.begin("configuration", false); if( preferences.getString("registred") == "yes") { return true; } return false;preferences.end();}void save_in_flash(char key1[] = "", String value1 = "", char key2[] = "" , String value2 = "", char key3[] = "" , String value3 = "", char key4[] = "" , String value4 = ""){ preferences.begin("configuration", false); preferences.putString(key1, value1); preferences.putString(key2, value2); preferences.putString(key3, value3); preferences.putString(key4, value4); Serial.println("les données de la page configuration ont bien ete enregistrées"); preferences.putString("registred", "yes"); preferences.end();}void ledBuiltinOff(){ pinMode(LED_BUILTIN, OUTPUT); digitalWrite(LED_BUILTIN, LOW);}void setup(){ ledBuiltinOff(); start_serial_communication(vitesse_de_communication, 1000); rtc_wdt_protect_off(); rtc_wdt_disable(); init_fast_led(); start_pin_mode();  jeux_de_lumiere();  jeux_de_lumiere_blanche(); start_spiffs_memory(); initSound(); start_wifi_ip(ssidAP, passwordAP); playSound("/buzzer.wav"); play(); start_async_server(); start_dns(domaine); start_websocket_server(); start_routing();}void loop(){  webSocket.loop(); send_buzzer();}void wsEvent(uint8_t n, WStype_t type, uint8_t *message, size_t length){ Serial.println("message recu"); }void start_serial_communication(int vitesse, unsigned int delayy){ Serial.begin(vitesse); delay(delayy);}void start_pin_mode(){ for(int i = 0 ; i <= 7; i++) { pinMode(pin[i], INPUT); }}void start_wifi_ip(char ssid[], char password[]){ WiFi.mode(WIFI_AP);  WiFi.softAP(ssid, password); IPAddress myIP = WiFi.softAPIP(); Serial.print("l'adresse IP est : "); Serial.println(myIP);}void start_async_server(){ server.begin();}void start_websocket_server(){ webSocket.begin(); webSocket.onEvent(wsEvent);}void start_dns(String domaine){ if (!MDNS.begin(domaine)) { Serial.println("Erreur lors de l'initialisation du service mDNS."); }}void start_spiffs_memory(){ if (!SPIFFS.begin(true)) { Serial.println("Probleme avec la memoire spifss"); }}String processor(const String& var) {  if(var == "nom_match") return match.nom_match; if(var == "equipe_A") return match.equipe_A; if(var == "equipe_B") return match.equipe_B;   if(var == "j_1_A") return j_1_A.nom_complet; if(var == "j_2_A") return j_2_A.nom_complet; if(var == "j_3_A") return j_3_A.nom_complet; if(var == "j_4_A") return j_4_A.nom_complet;  if(var == "j_1_B") return j_1_B.nom_complet; if(var == "j_2_B") return j_2_B.nom_complet; if(var == "j_3_B") return j_3_B.nom_complet; if(var == "j_4_B") return j_4_B.nom_complet; if(var == "vainqueur") {  match.vainqueur = vainqueur_du_match(); return match.vainqueur; } if(var == "nb_rep_bonn_j_1_A") return String(j_1_A.nombre_bonne_reponses); if(var == "nb_rep_bonn_j_2_A") return String(j_2_A.nombre_bonne_reponses); if(var == "nb_rep_bonn_j_3_A") return String(j_3_A.nombre_bonne_reponses); if(var == "nb_rep_bonn_j_4_A") return String(j_4_A.nombre_bonne_reponses); if(var == "nb_rep_bonn_j_1_B") return String(j_1_B.nombre_bonne_reponses); if(var == "nb_rep_bonn_j_2_B") return String(j_2_B.nombre_bonne_reponses); if(var == "nb_rep_bonn_j_3_B") return String(j_3_B.nombre_bonne_reponses); if(var == "nb_rep_bonn_j_4_B") return String(j_4_B.nombre_bonne_reponses); }String vainqueur_du_match(){ String vainqueur;  if (match.current_score_A > match.current_score_B) vainqueur = match.equipe_A; else if (match.current_score_A < match.current_score_B) vainqueur = match.equipe_B; else vainqueur = "MATCH NULL "; return vainqueur;}void start_routing(){  server.serveStatic("/style_min.css", SPIFFS, "/style_min.css"); server.serveStatic("/bootstrap.bundle.js", SPIFFS, "/bootstrap.bundle.js"); server.serveStatic("/all_min.js", SPIFFS, "/all_min.js"); server.serveStatic("/bootstrap_min.css", SPIFFS, "/bootstrap_min.css");  server.on("/configuration", HTTP_GET, [](AsyncWebServerRequest *request) { request->send(SPIFFS, "/configuration1_min.html", "text/html"); } );  server.on("/configurationSoumise", HTTP_GET, [](AsyncWebServerRequest *request) { if (request->hasParam("school_name") && request->hasParam("scoreur_name") && request->hasParam("user_name") && request->hasParam("password") && request->hasParam("verified_password")) { Serial.println("param recu"); if (request->getParam("password")->value() == request->getParam("verified_password")->value()) { Serial.println("enregistrement dans la memoire en cours...");  save_in_flash("school_name",request->getParam("school_name")->value(), "scoreur_name",request->getParam("scoreur_name")->value(), "user_name",request->getParam("user_name")->value(), "password", request->getParam("password")->value() ); request->redirect("/identification"); } else { request->redirect("/configuration"); }  } else { Serial.println("erreur sur la requete"); }}  );  server.serveStatic("/identification", SPIFFS, "/login1_min.html"); server.on("/identificationSoumise", HTTP_GET, [](AsyncWebServerRequest *request) { preferences.begin("configuration", false); if (request->hasParam("user_name") && request->hasParam("password")) {  if(preferences.getString("user_name") == request->getParam("user_name")->value() && preferences.getString("password") == request->getParam("password")->value() ) {   request->redirect("/avantMatch"); } else { Serial.println(preferences.getString("user_name")); Serial.println(preferences.getString("password")); Serial.println("tu reste ici");  request->redirect("/identification"); } } else { Serial.println("erreur sur la requete"); } preferences.end(); });  server.serveStatic("/avantMatch", SPIFFS, "/add1_min.html"); server.on("/avantMatchSoumise", HTTP_GET, [](AsyncWebServerRequest *request) {  if (request->hasParam("equipe_A") && request->hasParam("equipe_B") && request->hasParam("j_1_A") && request->hasParam("j_1_B")) {   match.nom_match = request->getParam("nom_match")->value();  match.equipe_A = request->getParam("equipe_A")->value(); j_1_A.nom_complet = request->getParam("j_1_A")->value(); j_1_A.nombre_bonne_reponses = 0; j_2_A.nom_complet = request->getParam("j_2_A")->value(); j_2_A.nombre_bonne_reponses = 0; j_3_A.nom_complet = request->getParam("j_3_A")->value(); j_3_A.nombre_bonne_reponses = 0; j_4_A.nom_complet = request->getParam("j_4_A")->value(); j_4_A.nombre_bonne_reponses = 0;  match.equipe_B = request->getParam("equipe_B")->value(); j_1_B.nom_complet = request->getParam("j_1_B")->value(); j_1_B.nombre_bonne_reponses = 0; j_2_B.nom_complet = request->getParam("j_2_B")->value(); j_2_B.nombre_bonne_reponses = 0; j_3_B.nom_complet = request->getParam("j_3_B")->value(); j_3_B.nombre_bonne_reponses = 0; j_4_B.nom_complet = request->getParam("j_4_B")->value(); j_4_B.nombre_bonne_reponses = 0; Serial.println("les données ont bien ete recues"); Serial.println(match.nom_match); Serial.println(j_1_A.nom_complet); Serial.println(j_1_B.nom_complet); request->redirect("/matchAdmin"); } else { Serial.println("erreur sur la requete"); } }); server.serveStatic("/matchAdmin", SPIFFS, "/admin1_min.html").setTemplateProcessor(processor);  server.serveStatic("/matchClient", SPIFFS, "/spectateur1_min.html").setTemplateProcessor(processor);  server.serveStatic("/finMatch", SPIFFS, "/finMatch1_min.html").setTemplateProcessor(processor); server.on("/finMatch_p", HTTP_GET, [](AsyncWebServerRequest *request) { String fin_match = "fin_match,!"; webSocket.broadcastTXT(fin_match.c_str(), fin_match.length());   } ); server.serveStatic("/logo.png", SPIFFS, "/logo.png"); server.serveStatic("/gagnant.png", SPIFFS, "/gagnant.png"); server.on("/", HTTP_GET, [](AsyncWebServerRequest *request) {  if (verified_configuration()) {  Serial.println("redirection vers ident"); request->redirect("/identification"); }  else { Serial.println("vers conf"); request->redirect("/configuration"); }  });server.on("/update_score", HTTP_GET, [](AsyncWebServerRequest *request) { playSound("/correct_song.wav"); play(); Serial.println("demande de mise a jour de score"); if (request->hasParam("score_A") && request->hasParam("score_B"))  {  match.current_score_A = (request->getParam("score_A")->value()).toInt(); match.current_score_B = (request->getParam("score_B")->value()).toInt();  }  String current_score = "score," + String(match.current_score_A) + "," + String(match.current_score_B); webSocket.broadcastTXT(current_score.c_str(), current_score.length()); });server.on("/update_score_by_j", HTTP_GET, [](AsyncWebServerRequest *request) { if (request->hasParam("score_A") && request->hasParam("score_B") && request->hasParam("id_joueur"))  { playSound("/correct_song.wav"); play();  match.current_score_A = (request->getParam("score_A")->value()).toInt(); match.current_score_B = (request->getParam("score_B")->value()).toInt(); if (request->getParam("id_joueur")->value() == "j_1_A") { Serial.println("le joueur j_1_A a trouvé"); j_1_A.nombre_bonne_reponses = j_1_A.nombre_bonne_reponses + 1;  String current_score = "score," + String(match.current_score_A) + "," + String(match.current_score_B); webSocket.broadcastTXT(current_score.c_str(), current_score.length());   lumiere_vert("j_1_A");  delay(1000); lumiere_orange("j_1_A"); } else if (request->getParam("id_joueur")->value() == "j_2_A") { j_2_A.nombre_bonne_reponses = j_2_A.nombre_bonne_reponses + 1; String current_score = "score," + String(match.current_score_A) + "," + String(match.current_score_B); webSocket.broadcastTXT(current_score.c_str(), current_score.length()); lumiere_vert("j_2_A");  delay(1000); lumiere_orange("j_2_A");  } else if (request->getParam("id_joueur")->value() == "j_3_A") { j_3_A.nombre_bonne_reponses = j_3_A.nombre_bonne_reponses + 1; String current_score = "score," + String(match.current_score_A) + "," + String(match.current_score_B); webSocket.broadcastTXT(current_score.c_str(), current_score.length());   lumiere_vert("j_3_A");  delay(1000); lumiere_orange("j_3_A"); } else if (request->getParam("id_joueur")->value() == "j_4_A") { j_4_A.nombre_bonne_reponses = j_4_A.nombre_bonne_reponses + 1; String current_score = "score," + String(match.current_score_A) + "," + String(match.current_score_B); webSocket.broadcastTXT(current_score.c_str(), current_score.length());   lumiere_vert("j_4_A");  delay(1000); lumiere_orange("j_4_A"); } else if (request->getParam("id_joueur")->value() == "j_1_B") { j_1_B.nombre_bonne_reponses = j_1_B.nombre_bonne_reponses + 1; String current_score = "score," + String(match.current_score_A) + "," + String(match.current_score_B); webSocket.broadcastTXT(current_score.c_str(), current_score.length());  lumiere_vert("j_1_B");  delay(1000); lumiere_orange("j_1_B"); } else if (request->getParam("id_joueur")->value() == "j_2_B") { j_2_B.nombre_bonne_reponses = j_2_B.nombre_bonne_reponses + 1; String current_score = "score," + String(match.current_score_A) + "," + String(match.current_score_B); webSocket.broadcastTXT(current_score.c_str(), current_score.length());  lumiere_vert("j_2_B"); delay(1000); lumiere_orange("j_2_B"); } else if (request->getParam("id_joueur")->value() == "j_3_B") { j_3_B.nombre_bonne_reponses = j_3_B.nombre_bonne_reponses + 1; String current_score = "score," + String(match.current_score_A) + "," + String(match.current_score_B); webSocket.broadcastTXT(current_score.c_str(), current_score.length());  lumiere_vert("j_3_B"); delay(1000); lumiere_orange("j_3_B"); }  else if (request->getParam("id_joueur")->value() == "j_4_B") { j_4_B.nombre_bonne_reponses = j_4_B.nombre_bonne_reponses + 1; String current_score = "score," + String(match.current_score_A) + "," + String(match.current_score_B); webSocket.broadcastTXT(current_score.c_str(), current_score.length());  lumiere_vert("j_4_B"); delay(1000); lumiere_orange("j_4_B"); } } });server.on("/phase", HTTP_GET, [](AsyncWebServerRequest *request) { Serial.println("demande de changement de phase"); if (request->hasParam("current_phase"))  {  Serial.println("reception de la phase actuelle du match"); match.current_phase = request->getParam("current_phase")->value();  String phase_match = "phase," + match.current_phase; webSocket.broadcastTXT(phase_match.c_str(), phase_match.length()); } });server.on("/remplacement", HTTP_GET, [](AsyncWebServerRequest *request) { Serial.println("demande de remplacement"); if (request->hasParam("id_joueur") && request->hasParam("nouveau_joueur"))  {     if (request->getParam("id_joueur")->value() == "j_1_A") { j_1_A.nom_complet = request->getParam("nouveau_joueur")->value();  String remplacement = "remplacement,j_1_A," + j_1_A.nom_complet; webSocket.broadcastTXT(remplacement.c_str(), remplacement.length()); } else if (request->getParam("id_joueur")->value() == "j_2_A") { j_2_A.nom_complet = request->getParam("nouveau_joueur")->value();  String remplacement = "remplacement,j_2_A," + j_2_A.nom_complet; webSocket.broadcastTXT(remplacement.c_str(), remplacement.length()); } else if (request->getParam("id_joueur")->value() == "j_3_A") { j_3_A.nom_complet = request->getParam("nouveau_joueur")->value();  String remplacement = "remplacement,j_3_A," + j_3_A.nom_complet; webSocket.broadcastTXT(remplacement.c_str(), remplacement.length()); } else if (request->getParam("id_joueur")->value() == "j_4_A") { j_4_A.nom_complet = request->getParam("nouveau_joueur")->value();  String remplacement = "remplacement,j_4_A," + j_4_A.nom_complet; webSocket.broadcastTXT(remplacement.c_str(), remplacement.length()); } else if (request->getParam("id_joueur")->value() == "j_1_B") { j_1_B.nom_complet = request->getParam("nouveau_joueur")->value();  String remplacement = "remplacement,j_1_B," + j_1_B.nom_complet; webSocket.broadcastTXT(remplacement.c_str(), remplacement.length()); } else if (request->getParam("id_joueur")->value() == "j_2_B") { j_2_B.nom_complet = request->getParam("nouveau_joueur")->value();  String remplacement = "remplacement,j_2_B," + j_2_B.nom_complet; webSocket.broadcastTXT(remplacement.c_str(), remplacement.length()); } else if (request->getParam("id_joueur")->value() == "j_3_B") { j_3_B.nom_complet = request->getParam("nouveau_joueur")->value();  String remplacement = "remplacement,j_3_B," + j_3_B.nom_complet; webSocket.broadcastTXT(remplacement.c_str(), remplacement.length()); } else if (request->getParam("id_joueur")->value() == "j_4_B") { j_4_B.nom_complet = request->getParam("nouveau_joueur")->value();  String remplacement = "remplacement,j_4_B," + j_4_B.nom_complet; webSocket.broadcastTXT(remplacement.c_str(), remplacement.length()); } } else { Serial.println("erreur sur la requete"); } });server.on("/chrono", HTTP_GET, [](AsyncWebServerRequest *request) { Serial.println("demande sur le chrono"); if (request->hasParam("status"))  { String chrono = "chrono," + request->getParam("status")->value(); webSocket.broadcastTXT(chrono.c_str(), chrono.length());  } });server.on("/joueur_fausse", HTTP_GET, [](AsyncWebServerRequest *request) { if (request->hasParam("id_joueur"))  { playSound("/incorrec_song.wav"); play(); if (request->getParam("id_joueur")->value() == "j_1_A") { Serial.println("le joueur j_1_A a fausse"); lumiere_rouge("j_1_A"); j_1_A.nombre_mauvaiz_reponses++; delay(1000); lumiere_orange("j_1_A"); } else if (request->getParam("id_joueur")->value() == "j_2_A") {   Serial.println("le joueur j_2_A a fausse"); lumiere_rouge("j_2_A"); j_2_A.nombre_mauvaiz_reponses++; delay(1000); lumiere_orange("j_2_A"); } else if (request->getParam("id_joueur")->value() == "j_3_A") { lumiere_rouge("j_3_A"); j_3_A.nombre_mauvaiz_reponses++; delay(1000); lumiere_orange("j_3_A"); } else if (request->getParam("id_joueur")->value() == "j_4_A") { lumiere_rouge("j_4_A"); j_4_A.nombre_mauvaiz_reponses++; delay(1000); lumiere_orange("j_4_A"); } else if (request->getParam("id_joueur")->value() == "j_1_B") { lumiere_rouge("j_1_B"); j_1_B.nombre_mauvaiz_reponses++; delay(1000); lumiere_orange("j_1_B"); } else if (request->getParam("id_joueur")->value() == "j_2_B") { lumiere_rouge("j_2_B"); j_2_B.nombre_mauvaiz_reponses++; delay(1000); lumiere_orange("j_2_B"); } else if (request->getParam("id_joueur")->value() == "j_3_B") { lumiere_rouge("j_3_B"); j_3_B.nombre_mauvaiz_reponses++; delay(1000); lumiere_orange("j_3_B"); } else if (request->getParam("id_joueur")->value() == "j_4_B") { lumiere_rouge("j_4_B"); j_4_B.nombre_mauvaiz_reponses++; delay(1000); lumiere_orange("j_4_B"); } } });server.on("/countdown", HTTP_GET, [](AsyncWebServerRequest *request) { if (request->hasParam("delay"))  { String delay_countdown = request->getParam("delay")->value(); String remplacement = "countdown," + delay_countdown; webSocket.broadcastTXT(remplacement.c_str(), remplacement.length()); Serial.println("countdown envoye"); } });}void send_buzzer(){  if(digitalRead(j_1_A.position_pin) == 1) { String qui_a_buzzer = "buzzeur,j_1_A_c"; webSocket.broadcastTXT(qui_a_buzzer.c_str(), qui_a_buzzer.length()); Serial.println("le joueur j_1_A a buzze"); lumiere_bleue("j_1_A");   delay(1000); lumiere_orange("j_1_A"); } else if(digitalRead(j_2_A.position_pin) == 1) { String qui_a_buzzer = "buzzeur,j_2_A_c"; webSocket.broadcastTXT(qui_a_buzzer.c_str(), qui_a_buzzer.length()); Serial.println("le joueur j_2_A a buzze"); lumiere_bleue("j_2_A");    delay(1000); lumiere_orange("j_2_A"); } else if(digitalRead(j_3_A.position_pin) == 1) { String qui_a_buzzer = "buzzeur,j_3_A_c"; webSocket.broadcastTXT(qui_a_buzzer.c_str(), qui_a_buzzer.length()); Serial.println("le joueur j_3_A a buzze"); lumiere_bleue("j_3_A");    delay(1000); lumiere_orange("j_3_A"); } else if(digitalRead(j_4_A.position_pin) == 1) { String qui_a_buzzer = "buzzeur,j_4_A_c"; webSocket.broadcastTXT(qui_a_buzzer.c_str(), qui_a_buzzer.length()); Serial.println("le joueur j_4_A a buzze"); lumiere_bleue("j_4_A");    delay(1000); lumiere_orange("j_4_A");  } else if(digitalRead(j_1_B.position_pin) == 1) { String qui_a_buzzer = "buzzeur,j_1_B_c"; webSocket.broadcastTXT(qui_a_buzzer.c_str(), qui_a_buzzer.length()); Serial.println("le joueur j_1_B a buzze"); lumiere_bleue("j_1_B");    delay(1000); lumiere_orange("j_1_B");  } else if(digitalRead(j_2_B.position_pin) == 1) { String qui_a_buzzer = "buzzeur,j_2_B_c"; webSocket.broadcastTXT(qui_a_buzzer.c_str(), qui_a_buzzer.length()); Serial.println("le joueur j_2_B a buzze");  lumiere_bleue("j_2_B");   delay(1000); lumiere_orange("j_2_B");  } else if(digitalRead(j_3_B.position_pin) == 1) { String qui_a_buzzer = "buzzeur,j_3_B_c"; webSocket.broadcastTXT(qui_a_buzzer.c_str(), qui_a_buzzer.length()); Serial.println("le joueur j_3_B a buzze"); lumiere_bleue("j_3_B");    delay(1000); lumiere_orange("j_3_B"); } else if(digitalRead(j_4_B.position_pin) == 1) { String qui_a_buzzer = "buzzeur,j_4_B_c"; webSocket.broadcastTXT(qui_a_buzzer.c_str(), qui_a_buzzer.length()); Serial.println("le joueur j_4_B a buzze");  lumiere_bleue("j_4_B"); delay(1000); lumiere_orange("j_4_B");  }}void init_fast_led(){ FastLED.addLeds<WS2812B, DATA_PIN_A, GRB>(LED_A, NUM_LED_A);  FastLED.addLeds<WS2812B, DATA_PIN_B, GRB>(LED_B, NUM_LED_B);}void lumiere_bleue(String id_joueur){  int a; if (id_joueur == "j_1_A") {  a = 0; for(int i=a;i<(a+12);i++) { LED_A[i] = CRGB::Blue; FastLED.show(); } } else if (id_joueur == "j_2_A") {  a = 12; for(int i=a;i<(a+12);i++) { LED_A[i] = CRGB::Blue; FastLED.show(); } } else if (id_joueur == "j_3_A") {  a = 24; for(int i=a;i<(a+12);i++) { LED_A[i] = CRGB::Blue; FastLED.show(); } } else if (id_joueur == "j_4_A") {  a = 36; for(int i=a;i<(a+12);i++) { LED_A[i] = CRGB::Blue; FastLED.show(); } } else if (id_joueur == "j_1_B") {  a = 0; for(int i=a;i<(a+12);i++) { LED_B[i] = CRGB::Blue; FastLED.show(); } } else if (id_joueur == "j_2_B") {  a = 12; for(int i=a;i<(a+12);i++) { LED_B[i] = CRGB::Blue; FastLED.show(); } } else if (id_joueur == "j_3_B") {  a = 24; for(int i=a;i<(a+12);i++) { LED_B[i] = CRGB::Blue; FastLED.show(); } } else if (id_joueur == "j_4_B") {  a = 36; for(int i=a;i<(a+12);i++) { LED_B[i] = CRGB::Blue; FastLED.show(); } }}void lumiere_orange(String id_joueur){  int a; if (id_joueur == "j_1_A") {  a = 0; for(int i=a;i<(a+12);i++) { LED_A[i] = CRGB::Orange; FastLED.show(); } } else if (id_joueur == "j_2_A") {  a = 12; for(int i=a;i<(a+12);i++) { LED_A[i] = CRGB::Orange; FastLED.show(); } } else if (id_joueur == "j_3_A") {  a = 24; for(int i=a;i<(a+12);i++) { LED_A[i] = CRGB::Orange; FastLED.show(); } } else if (id_joueur == "j_4_A") {  a = 36; for(int i=a;i<(a+12);i++) { LED_A[i] = CRGB::Orange; FastLED.show(); } } else if (id_joueur == "j_1_B") {  a = 0; for(int i=a;i<(a+12);i++) { LED_B[i] = CRGB::Orange; FastLED.show(); } } else if (id_joueur == "j_2_B") {  a = 12; for(int i=a;i<(a+12);i++) { LED_B[i] = CRGB::Orange; FastLED.show(); } } else if (id_joueur == "j_3_B") {  a = 24; for(int i=a;i<(a+12);i++) { LED_B[i] = CRGB::Orange; FastLED.show(); } } else if (id_joueur == "j_4_B") {  a = 36; for(int i=a;i<(a+12);i++) { LED_B[i] = CRGB::Orange; FastLED.show(); } }}void lumiere_rouge(String id_joueur){  int a; if (id_joueur == "j_1_A") {  a = 0; for(int i=a;i<(a+12);i++) { LED_A[i] = CRGB::Red; FastLED.show(); } } else if (id_joueur == "j_2_A") {  a = 12; for(int i=a;i<(a+12);i++) { LED_A[i] = CRGB::Red; FastLED.show(); } } else if (id_joueur == "j_3_A") {  a = 24; for(int i=a;i<(a+12);i++) { LED_A[i] = CRGB::Red; FastLED.show(); } } else if (id_joueur == "j_4_A") {  a = 36; for(int i=a;i<(a+12);i++) { LED_A[i] = CRGB::Red; FastLED.show(); } } else if (id_joueur == "j_1_B") {  a = 0; for(int i=a;i<(a+12);i++) { LED_B[i] = CRGB::Red; FastLED.show(); } } else if (id_joueur == "j_2_B") {  a = 12; for(int i=a;i<(a+12);i++) { LED_B[i] = CRGB::Red; FastLED.show(); } } else if (id_joueur == "j_3_B") {  a = 24; for(int i=a;i<(a+12);i++) { LED_B[i] = CRGB::Red; FastLED.show(); } } else if (id_joueur == "j_4_B") {  a = 36; for(int i=a;i<(a+12);i++) { LED_B[i] = CRGB::Red; FastLED.show(); } }}void lumiere_vert(String id_joueur){  int a; if (id_joueur == "j_1_A") {  a = 0; for(int i=a;i<(a+12);i++) { LED_A[i] = CRGB::Green; FastLED.show(); } } else if (id_joueur == "j_2_A") {  a = 12; for(int i=a;i<(a+12);i++) { LED_A[i] = CRGB::Green; FastLED.show(); } } else if (id_joueur == "j_3_A") {  a = 24; for(int i=a;i<(a+12);i++) { LED_A[i] = CRGB::Green; FastLED.show(); } } else if (id_joueur == "j_4_A") {  a = 36; for(int i=a;i<(a+12);i++) { LED_A[i] = CRGB::Green; FastLED.show(); } } else if (id_joueur == "j_1_B") {  a = 0; for(int i=a;i<(a+12);i++) { LED_B[i] = CRGB::Green; FastLED.show(); } } else if (id_joueur == "j_2_B") {  a = 12; for(int i=a;i<(a+12);i++) { LED_B[i] = CRGB::Green; FastLED.show(); } } else if (id_joueur == "j_3_B") {  a = 24; for(int i=a;i<(a+12);i++) { LED_B[i] = CRGB::Green; FastLED.show(); } } else if (id_joueur == "j_4_B") {  a = 36; for(int i=a;i<(a+12);i++) { LED_B[i] = CRGB::Green; FastLED.show(); } }}void jeux_de_lumiere(){       int a; a = 0; for(int i=a;i<(a+12);i++) { LED_A[i] = CRGB::Orange; FastLED.show(); }  a = 12; for(int i=a;i<(a+12);i++) { LED_A[i] = CRGB::Orange; FastLED.show(); }  a = 24; for(int i=a;i<(a+12);i++) { LED_A[i] = CRGB::Orange; FastLED.show(); }  a = 36; for(int i=a;i<(a+12);i++) { LED_A[i] = CRGB::Orange; FastLED.show(); }  a = 0; for(int i=a;i<(a+12);i++) { LED_B[i] = CRGB::Orange; FastLED.show(); }   a = 12; for(int i=a;i<(a+12);i++) { LED_B[i] = CRGB::Orange; FastLED.show(); }  a = 24; for(int i=a;i<(a+12);i++) { LED_B[i] = CRGB::Orange; FastLED.show(); }  a = 36; for(int i=a;i<(a+12);i++) { LED_B[i] = CRGB::Orange; FastLED.show(); }}void jeux_de_lumiere_blanche(){       int a; a = 0; for(int i=a;i<(a+12);i++) { LED_A[i] = CRGB::White; FastLED.show(); }  a = 12; for(int i=a;i<(a+12);i++) { LED_A[i] = CRGB::White; FastLED.show(); }  a = 24; for(int i=a;i<(a+12);i++) { LED_A[i] = CRGB::White; FastLED.show(); }  a = 36; for(int i=a;i<(a+12);i++) { LED_A[i] = CRGB::White; FastLED.show(); }  a = 0; for(int i=a;i<(a+12);i++) { LED_B[i] = CRGB::White; FastLED.show(); }   a = 12; for(int i=a;i<(a+12);i++) { LED_B[i] = CRGB::White; FastLED.show(); }  a = 24; for(int i=a;i<(a+12);i++) { LED_B[i] = CRGB::White; FastLED.show(); }  a = 36; for(int i=a;i<(a+12);i++) { LED_B[i] = CRGB::White; FastLED.show(); }}
